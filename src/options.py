import argparse


def get_argparse():
    parser = argparse.ArgumentParser()
    group = parser.add_mutually_exclusive_group(required=False)
    group.add_argument('--ae_range',type=int,nargs='+',help='specify aes as [start,stop) range, eg 5 10')
    group.add_argument('--aeids',type=int,nargs='+',help='specify ae ids as a list explicitly')
    group.add_argument('--num_aes',type=int,help='specify ae as all up to a certain number, like range with start omitted')
    parser.add_argument('--NZ',type=int,default=50,help='size of the latent space')
    parser.add_argument('--batch_size',type=int,default=64)
    parser.add_argument('--clusterer',type=str,default='HDBSCAN',choices=['HDBSCAN','GMM'],help='clustering algorithm to use')
    parser.add_argument('--conc',action='store_true',help='whether to add the concatenation of all latent spaces as an additional ensemble member')
    parser.add_argument('--disable_cuda',action='store_true')
    parser.add_argument('--dset',type=str,default='MNISTfull',choices=['MNISTfull','FashionMNIST','USPS','MNISTtest','CIFAR10','coil-100', 'letterAJ'])
    parser.add_argument('--epochs',type=int,default=8,help='number of epochs to pseudo_label train for')
    parser.add_argument('--exp_name',type=str,default='try',help='experiment name')
    parser.add_argument('--gen_batch_size',type=int,default=100,help='batch size for generating latent vectors, ie for validation')
    parser.add_argument('--gpus',type=str,nargs='+',default=['0'],help='which gpus to use')
    parser.add_argument('--max_meta_epochs',type=int,default=30,help='max number of times to run outermost loop, ie the while loop in Algorithm 1 in the paper')
    parser.add_argument('--overwrite',action='store_true',help='whether to overwrite existing experiment of the same name, if one exists')
    parser.add_argument('--noise',type=float,default=1.5,help='magnitude of gaussian noise to inject into the latent space')
    parser.add_argument('--patience',type=int,default=7,help='number of meta epochs without improvement before terminating training')
    parser.add_argument('--pretrain_epochs',type=int,default=10,help='number of epochs to pretrain aes for')
    parser.add_argument('--save','-s',action='store_true',help='whether to save aes, vectors and labels')
    parser.add_argument('--scatter_clusters',action='store_true',help='whether to show a scatter plot of the predicted clusters at each iteration')
    parser.add_argument('--sections',type=int,nargs='+', default=[4],help='which sections of the training procedure to run, specified as 1,2,3,4 as in Section 3 of the paper')
    parser.add_argument('--seed',type=int,default=0,help='random seed')
    parser.add_argument('--short_epochs',action='store_true',help='if true, set all epoch-type args to 1')
    parser.add_argument('--single',action='store_true',help='whether to train one ensemble member at a time, rather than in parallel')
    parser.add_argument('--ablation',type=str,choices=['none','sharing','filtering'],default='none',help='which ablation setting to use, or none')
    parser.add_argument('--show_gpu_memory',action='store_true',help='show gpu memory consumption at each iteration')
    parser.add_argument('--split',type=int,default=-1,help='number of ensemble members to train parallel')
    parser.add_argument('--reload_chkpt',type=str,default='none')
    parser.add_argument('--test','-t',action='store_true',help='whether to run a greatly shortened version of the training procedure, useful for quickly detecting runtime errors')
    parser.add_argument('--vis_pretrain',action='store_true',help='whether to visualize latents after pretraining')
    return parser.parse_args()
